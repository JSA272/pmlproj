side1$board <- setboat(side1, side1$fleet$ptboat)
side1$board <- setboat(side1, side1$fleet$sub)
side1$board <- setboat(side1, side1$fleet$destroyer)
side1$board <- setboat(side1, side1$fleet$battlesh)
side1$board <- setboat(side1, side1$fleet$carrier)
side1 <- side
side1$board
side1$fleet$ptboat$pos <- c(2,3)
side1$fleet$ptboat$dir <- FALSE
side1$fleet$carrier$pos <- c(5,5)
side1$fleet$sub$pos <- c(1,5)
side1$fleet$battlesh$pos <- c(10,0)
side1$fleet$battlesh$dir <- FALSE
side1$fleet$destroyer$pos <- c(2,9)
setside <- function(){
side1$board <- setboat(side1, side1$fleet$ptboat)
side1$board <- setboat(side1, side1$fleet$sub)
side1$board <- setboat(side1, side1$fleet$destroyer)
side1$board <- setboat(side1, side1$fleet$battlesh)
side1$board <- setboat(side1, side1$fleet$carrier)
}
setside()
side1$board
setside <- function(){
side1$board <- setboat(side1, side1$fleet$ptboat)
side1$board <- setboat(side1, side1$fleet$sub)
side1$board <- setboat(side1, side1$fleet$destroyer)
side1$board <- setboat(side1, side1$fleet$battlesh)
side1$board <- setboat(side1, side1$fleet$carrier)
side1$board
}
side1$board <- setside()
side1$board
setside2 <- function(side){
side$board <- setboat(side, side$fleet$ptboat)
side$board <- setboat(side, side$fleet$sub)
side$board <- setboat(side, side$fleet$destroyer)
side$board <- setboat(side, side$fleet$battlesh)
side$board <- setboat(side, side$fleet$carrier)
side$board
}
side1$board <- setside2(side1)
side1$board
setside <- function(side){
side$board <- setboat(side, side$fleet$ptboat)
side$board <- setboat(side, side$fleet$sub)
side$board <- setboat(side, side$fleet$destroyer)
side$board <- setboat(side, side$fleet$battlesh)
side$board <- setboat(side, side$fleet$carrier)
side$board
}
side1$board
side1 <- side
side1$fleet$ptboat$pos <- c(2,3)
side1$fleet$ptboat$dir <- FALSE
side1$fleet$carrier$pos <- c(5,5)
side1$fleet$sub$pos <- c(1,5)
side1$fleet$battlesh$pos <- c(10,0)
side1$fleet$battlesh$dir <- FALSE
side1$fleet$destroyer$pos <- c(2,9)
side1$board <- setside(side1)
side1$board
side1 <- side
side1$fleet$ptboat$pos <- c(2,3)
side1$fleet$ptboat$dir <- FALSE
side1$fleet$carrier$pos <- c(5,5)
side1$fleet$sub$pos <- c(1,5)
side1$fleet$battlesh$pos <- c(10,0)
side1$fleet$battlesh$dir <- FALSE
side1$fleet$destroyer$pos <- c(2,9)
side1$board
side1$board <- setside(side1)
side1$board
readline()
saf
x <- readline()
x
parse(text = "1+1")
eval(parse(text = "1+1"))
eval(parse(text = paste("1", "+", "1", sep = ""))
eval(parse(text = paste("1", "+", "1", sep = "")))
eval(parse(text = paste("side1$", "fleet$", "ptboat$pos", sep = "")))
?go
go <- function(input){
eval(parse(text =input)))
}
go("1+1")
go <- function(input){
eval(parse(text =input)))
}
go <- function(input){
eval(parse(text =input))
}
go("1+1")
side1$board
side2$board
side1$board
side1$board[10,1]
side1$board[10,1] <- "[X]"
side1$board[10,2] <- "[X]"
side1$board[10,3] <- "[X]"
side1$board
setside <- function(side){
side$board <- setboat(side, side$fleet$ptboat)
side$board <- setboat(side, side$fleet$sub)
side$board <- setboat(side, side$fleet$destroyer)
side$board <- setboat(side, side$fleet$battlesh)
side$board <- setboat(side, side$fleet$carrier)
side$board
}
side
sidein
names(sidein$fleet)
setside <- function(sidein){
for (i in names(sidein$fleet)){
side$board <- setboat(side, go(paste(sidein, "$fleet$", i, sep = "")))
}
side$board
}
side1 <- side
side1$fleet$ptboat$pos <- c(2,3)
side1$fleet$ptboat$dir <- FALSE
side1$fleet$carrier$pos <- c(5,5)
side1$fleet$sub$pos <- c(1,5)
side1$fleet$battlesh$pos <- c(10,0)
side1$fleet$battlesh$dir <- FALSE
side1$fleet$destroyer$pos <- c(2,9)
side1$board <- setside(side1)
names(sidein$fleet)
names(sidein$fleet)[1]
i <- ptboat
paste(names(sidein$fleet)[1], "$fleet$", i, sep = "")
go(paste(names(sidein$fleet)[1], "$fleet$", i, sep = ""))
"side1$fleet$ptboat"
go("side1$fleet$ptboat")
paste(names(sidein$fleet)[1], "$fleet$", i, sep = "")
paste("side1", "$fleet$", i, sep = "")
i <- "ptboat"
paste("side1", "$fleet$", i, sep = "")
go(paste("side1", "$fleet$", i, sep = ""))
names(sidein)
side1$name
side1$name <- "side1"
setside <- function(sidein){
for (i in names(sidein$fleet)){
side$board <- setboat(side, go(paste(sidein$name, "$fleet$", i, sep = "")))
}
side$board
}
side1$board <- setside(side1)
side1$board
?deparse(substitute())
?substitute())
?substitute
setside <- function(sidein){
for (i in names(sidein$fleet)){
side$board <- setboat(deparse(substitute(side)), go(paste(sidein$name, "$fleet$", i, sep = "")))
}
side$board
}
side1 <- side
side1$fleet$ptboat$pos <- c(2,3)
side1$fleet$ptboat$dir <- FALSE
side1$fleet$carrier$pos <- c(5,5)
side1$fleet$sub$pos <- c(1,5)
side1$fleet$battlesh$pos <- c(10,0)
side1$fleet$battlesh$dir <- FALSE
side1$fleet$destroyer$pos <- c(2,9)
side1$board <- setside(side1)
test <- function(x){
print(deparse(substitute(x)))
}
test(side1)
side1$board
setside <- function(sidein){
for (i in names(sidein$fleet)){
side$board <- setboat(sidein, go(paste(test(sidein), "$fleet$", i, sep = "")))
}
side$board
}
side1$board <- setside(side1)
test <- function(x){
deparse(substitute(x))
}
side1$board <- setside(side1)
side1$board
names(sidein$fleet)
getname <- function(x){
deparse(substitute(x))
}
setside <- function(sidein){
for (i in names(sidein$fleet)){
side$board <- setboat(sidein, go(paste(getname(sidein), "$fleet$", i, sep = "")))
}
side$board
}
substitute(name1)
substitute(side1)
substitute(x)
x <- side1
substitute(x)
subit <- function(x){
substitute(x)
}
subit(side1)
test <- function(x){
dos <- function(y){
substitute(y)
}
out <- dos(x)
out
}
test(1)
test <- function(x){
dos <- function(y){
tres <- function(z){
substitute(z)
}
out<- tres(y)
out
}
out <- dos(x)
out
}
test(1)
install.packages("tm")
install.packages("wordcloud")
library(tm)
library(wordcloud)
lords <- Corpus(DirSource("test/"))
inspect(lords)
lords <- Corpus(DirSource("test/"))
inspect(lords)
getd
getwd()
lords <- Corpus(DirSource("./test/"))
inspect(lords)
Corpus(DirSource("./test/"))
lords <- Corpus(DirSource("./test/"))
lords
inspect(lords)
rm(lords)
inspect(lords)
lords <- Corpus(DirSource("./test/"))
inspect(lords)
lords <- Corpus(DirSource("./butts/"))
inspect(lords)
lords <- Corpus(DirSource("./butts/"))
install.packages("wordcloud")
install.packages("tm")
library(tm)
lords <- Corpus(DirSource("./butts/"))
inspect(lords)
?Corpus(DirSource("./butts/"))
lords <- ?Corpus(DirSource("Untitled.txt"))
inspect(lords)
?wordcloud
library(wordcloud)
?wordcloud
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
?seq
?wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
?read.file
scan.txt
?scan.txt
?read.lines
?readlines
?scan
lords <- scan(file = "Untitled.txt")
fileName <- 'Untitled.txt'
lords <- readChar(fileName, file.info(fileName)$size)
head(lords)
wordcloud(lords, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, “Dark2″))
?wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(lords, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, “Dark2″))
wordcloud(lords, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE)
wordcloud(lords, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, “Dark2″))
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(lords, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors= red)
wordcloud(lords, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors= 'red')
lords <- Corpus(DirSource("Untitled.txt"))
lords <- Corpus(DirSource("./Untitled.txt"))
lords <- Corpus(DirSource("./test"))
lords <- Corpus(DirSource("./test/"))
lords <- Corpus(DirSource("test/"))
lords <- Corpus(DirSource("Documents/R\ Projects/test/"))
getwd()
lords <- Corpus(DirSource("./test/"))
setSources()
getSources()
lords <- VCorpus(DirSource("./test/"))
wordcloud(c("butts and these more butts","ears can't hear me"), scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors= 'red')
qns <- read.csv("./nyc_pluto/QN.csv")`
qns <- read.csv("./nyc_pluto/QN.csv")
qns <- read.csv("./nyc_pluto/QN.csv")
names(qns)
str(qns)
sum(qns$CD == 402)
qns[qns$CD == 402,]
str(qns)
qns[qns$CD == 402,]$SchoolDist
unique(qns[qns$CD == 402,]$SchoolDist)
unique(qns[qns$CD == 401,]$SchoolDist)
unique(qns[qns$CD == 403,]$SchoolDist)
unique(qns[qns$CD == 404,]$SchoolDist)
unique(qns[qns$CD == 405,]$SchoolDist)
unique(qns$CD)
unique(qns$SchoolDist)
library(caret)
install.packages("caret")
library(caret)
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
log(0)
str(concrete)
hist(concrete$Superplasticizer)
sum(concrete$Superplasticizer == 0)
library(ggplot2)
qplot(Superplasticizer,data=training)
qplot(log(Superplasticizer+1),data=training)
qplot(Superplasticizer,data=training)
qplot(log(Superplasticizer+1),data=training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
fancyRpartPlot(model$finalModel)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("rpart")
library(ggplot2)
library(rattle)
install.packages("rattle")
library(rattle)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
fancyRpartPlot(model$finalModel)
model<-train(Class ~ .,
data = training,
method = "rpart")
library(caret)
model<-train(Class ~ .,
data = training,
method = "rpart")
model<-train(Class ~ .,
data = training,
method = "rpart")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
install.packages("e1071")
library(e1071)
fancyRpartPlot(model$finalModel)
model<-train(Class ~ .,
data = training,
method = "rpart")
fancyRpartPlot(model$finalModel)
dependencies = c("Depends", "Imports"))
install.packages(pkgs = "caret",
dependencies = c("Depends", "Imports"))
install.packages(pkgs = "caret", dependencies = c("Depends",
fancyRpartPlot(model$finalModel)
install.packages(pkgs = "caret", dependencies = c("Depends", "Imports"))
install.packages(pkgs = "caret", dependencies = c("Depends",
library(caret)
install.packages(pkgs = "caret", dependencies = c("Depends", "Imports"))
getwd()
setwd("./fmlproj")
setwd("./pmlproj")
getwd()
setwd("..")
getwd()
?save.image
save.image()
setwd("./pmlproj")
rm(list=ls())
save.image()
getwd()
list.files()
getwd()
?append
append
append("xxxxx", "O")
append(c("xxxxx","xxx","xxx"), "O")
append(c("xxxxx","xxx","xxx"), "O", 2)
append(c("xxxxx","xxx","xxx"), "O", 1)
get.files()
list.files()
testing <- read.csv("pml-testing.csv")
str(testing)
names(testing)
require(caret)
dim(testing)
list.files()
training <- read.csv("pml-training.csv")
dim(testing)
dim(training)
names(training)
str(training$classe)
levels(training$classe)
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
levels(training$classe)
levels(factor(training$classe))
unique(training$classe)
str(training)
is.nan(apply(training, avg))
is.nan(apply(training, 1, avg))
is.nan(apply(training, 1, avg()))
is.nan(apply(training, 1, avg())))
modelFit <- train(classe~., data = training, method = "glm")
training$classe <- as.factor(training$classe)
modelFit <- train(classe~., data = training, method = "glm")
training <- read.csv("pml-training.csv")
modelFit <- train(classe~., data = training, method = "glm")
modelFit <- train(classe ~., data = training, method = "glm")
dim(training)
hist(training[,1])
hist(training[,2])
mean(c(NA,NA,NA))
sum(c(NA,NA,NA))
?preProcess
?apply
mean(c(NA,NA,NA), na.rm = TRUE)
apply(training,2, function x {mean(x, na.rm = TRUE)})
apply(training,2, function x mean(x, na.rm = TRUE))
apply(training,2, function(x) mean(x, na.rm = TRUE))
sapply(testing, function(x)all(is.na(x)))
sapply(testing, function(x) all(is.na(x)))
sum(sapply(testing, function(x) all(is.na(x))))
dim(training)
sum(sapply(training, function(x) all(is.na(x))))
training <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
sum(sapply(training, function(x) all(is.na(x))))
testing <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
sum(sapply(testing, function(x) all(is.na(x))))
sum(sapply(training, function(x) all(is.na(x))))
training <- training[,!sapply(training, function(x) all(is.na(x)))]
modelFit <- train(classe ~., data = training, method = "glm")
sapply(training, function(x) all(is.na(x)))
trainingset   <-trainingset[,-c(1:7)]
training   <-training[,-c(1:7)]
training$classe <- as.factor(training$classe)
modelFit <- train(classe ~., data = training, method = "glm")
colSums(is.na(trainingset)
colSums(is.na(training)
colSums(is.na(training))
colSums(is.na(training))
training <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
colSums(is.na(training))
dim(training)
colSums(is.na(training))== 19622
sum(colSums(is.na(training))== 19622)
sum(colSums(is.na(training))== nrow(training))
(colSums(is.na(training))== nrow(training)
colSums(is.na(training))== nrow(training)
colSums(is.na(training))== nrow(training)
!colSums(is.na(training))== nrow(training)
training <- training[,!colSums(is.na(training))== nrow(training)]
modelFit <- train(classe ~., data = training, method = "glm")
modelFit <- rpart(classe ~ ., data=training, method="class")
modelFit <- train(classe ~ ., data=training, method="class")
modelFit <- train(classe ~., data = training, method = "glm")
?nearZeroVar
nearZeroVar(training)
